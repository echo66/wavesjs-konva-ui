'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var Waveform = (function (_BaseShape) {
	_inherits(Waveform, _BaseShape);

	function Waveform() {
		_classCallCheck(this, Waveform);

		_get(Object.getPrototypeOf(Waveform.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Waveform, [{
		key: 'destroy',
		value: function destroy() {
			this.$label.destroy();
			this.$label = null;

			this.$header.destroy();
			this.$header = null;

			this.$body.destroy();
			this.$body = null;

			this.$leftHandler.destroy();
			this.$leftHandler = null;

			this.$rightHandler.destroy();
			this.$rightHandler = null;

			this.$waveform.destroy();
			this.$waveform = null;

			_get(Object.getPrototypeOf(Waveform.prototype), 'destroy', this).call(this);
		}
	}, {
		key: 'getClassName',
		value: function getClassName() {
			return 'waveform';
		}
	}, {
		key: '_getAccessorList',
		value: function _getAccessorList() {
			// return { y: 0 };
			// TODO: delete all but sampleRate.
			return { data: [], x: 0, width: 10000, bufferStart: 0, bufferEnd: 0, sampleRate: 44100, color: 'black', text: "" };
		}
	}, {
		key: '_getDefaults',
		value: function _getDefaults() {
			return {
				waveformQuality: 8000,
				squaringFactor: 1,
				displayHandlers: true,
				headerHeightRatio: 0.1, // 10% of the body height
				waveform: {
					color: '#000000',
					opacity: 1
				},
				header: {
					color: 'green',
					opacity: 0.4
				},
				body: {
					color: 'yellow',
					opacity: 0.1
				},
				handler: {
					width: 2,
					opacity: 1,
					color: 'orange'
				}
			};
		}
	}, {
		key: 'render',
		value: function render(renderingContext) {
			if (this.$el) {
				return this.$el;
			}

			this.$el = [];

			this.$header = new Konva.Rect({});
			this.$header.addName('header');
			this.$header.shape = this;
			// this.$header.on('mouseover', function() { document.body.style.cursor = 'pointer'; });
			// this.$header.on('mouseout', function() { document.body.style.cursor = 'default'; });		

			this.$body = new Konva.Rect({});
			this.$body.addName('body');
			this.$body.shape = this;
			// this.$body.on('mouseover', function() { document.body.style.cursor = 'pointer'; });
			// this.$body.on('mouseout', function() { document.body.style.cursor = 'default'; });

			this.$leftHandler = new Konva.Rect({});
			this.$leftHandler.addName('handler');
			this.$leftHandler.addName('left');
			this.$leftHandler.shape = this;
			// this.$leftHandler.on('mouseover', function() { document.body.style.cursor = 'ew-resize'; });
			// this.$leftHandler.on('mouseout', function() { document.body.style.cursor = 'default'; });

			this.$rightHandler = new Konva.Rect({});
			this.$rightHandler.addName('handler');
			this.$rightHandler.addName('right');
			this.$rightHandler.shape = this;
			// this.$rightHandler.on('mouseover', function() { document.body.style.cursor = 'ew-resize'; });
			// this.$rightHandler.on('mouseout', function() { document.body.style.cursor = 'default'; });

			this.$label = new Konva.Text({ listening: false });
			this.$label.shape = this;

			this.$waveform = new Konva.Path({ listening: false });
			this.$waveform.shape = this;

			this.$el.push(this.$body);
			this.$el.push(this.$waveform);
			this.$el.push(this.$header);
			this.$el.push(this.$label);
			this.$el.push(this.$leftHandler);
			this.$el.push(this.$rightHandler);

			return this.$el;
		}
	}, {
		key: 'update',
		value: function update(renderingContext, datum) {
			var d = datum || this.datum;

			this.$label.visible(this.visible);
			this.$body.visible(this.visible);
			this.$leftHandler.visible(this.visible && this.params.displayHandlers);
			this.$rightHandler.visible(this.visible && this.params.displayHandlers);
			this.$waveform.visible(this.visible);

			if (!this.visible) return;

			var x = renderingContext.timeToPixel(this.x(d));
			var width = renderingContext.timeToPixel(this.width(d));
			var height = renderingContext.height;
			var color = this.params.waveform.color;

			for (var i in this.$el) {
				this.$el[i].x(x).y(0);
			}

			this.$label.text(this.text(d)).x(x + 10).y(5);

			this.$header.width(Math.max(width, 0)).height(height * this.params.headerHeightRatio).fill(this.params.header.color).opacity(this.params.header.opacity);
			this.$body.width(Math.max(width, 0)).height(height).fill(this.params.body.color).opacity(this.params.body.opacity);

			this.$leftHandler.width(this.params.handler.width).height(height).fill(this.params.handler.color);

			this.$rightHandler.x(x + width - this.params.handler.width).width(this.params.handler.width).height(height).fill(this.params.handler.color);

			this.$waveform.fill(this.params.waveform.color).opacity(this.params.waveform.opacity).y(0);

			this.$waveform.perfectDrawEnabled(false);

			// WAVEFORM PART

			var AUX = 5000;

			var timeToPixel = renderingContext.timeToPixel;
			if (this.oldPixelsPerSecond == undefined) {
				console.log('init');
				timeToPixel = scales.linear().domain([0, 1]).range([0, AUX]);
			}

			// TODO: change this check.
			if (this.oldPixelsPerSecond == renderingContext.pixelsPerSecond) {
				console.log('same pixelsPerSecond');
				return;
			}

			if (this.oldBufferStart == this.bufferStart(d) && this.oldBufferEnd == this.bufferEnd(d)) {
				var s = this.oldW != undefined ? this.width(d) / this.oldW : 1;
				this.$waveform.scaleX(s * renderingContext.pixelsPerSecond / this.oldPixelsPerSecond);
				console.log('same buffer interval ' + this.oldPixelsPerSecond);
				return;
			}

			this.$waveform.clearCache();

			this.oldW = this.width(d);

			// THIS VERSION GENERATES TWO PATHS, BOTH MIRROR OF THE OTHER, ALIGNED AT THE CENTER OF THE YDOMAIN.
			var arr = this.data(d).subarray(this.bufferStart(d), this.bufferEnd(d));
			var ORIGINSIZE = arr.length;
			var WANTEDSIZE = this.params.waveformQuality;
			var that = this;
			var speed = ORIGINSIZE / WANTEDSIZE;
			var yDomain = renderingContext.valueToPixel.domain();
			var midY = (Math.max(yDomain[0], yDomain[1]) - Math.min(yDomain[0], yDomain[1])) / 2;
			var pMidY = renderingContext.valueToPixel(midY);

			var pathBottom = '';
			var pathUpper = '';

			for (var _i = 0; _i < ORIGINSIZE; _i += speed) {

				var _x = _i / ORIGINSIZE * this.width(d) / this.params.squaringFactor;
				var px = timeToPixel(_x);

				var Y = this.linear_interpolation(arr, _i);

				var yU = Math.abs(Y) / 2 + midY;
				var pyU = renderingContext.valueToPixel(yU);
				pathUpper += px + ',' + pyU + 'L';

				var yB = -Math.abs(Y) / 2 + midY;
				var pyB = renderingContext.valueToPixel(yB);
				pathBottom += px + ',' + pyB + 'L';
			}

			var pWidth = timeToPixel(this.width(d));
			pathBottom = 'M' + (0 + ',' + pMidY + 'L') + pathBottom + (pWidth / this.params.squaringFactor + ',' + pMidY) + 'z';
			pathUpper = 'M' + (0 + ',' + pMidY + 'L') + pathUpper + (pWidth / this.params.squaringFactor + ',' + pMidY) + 'z';

			this.$waveform.data(pathUpper + pathBottom).strokeWidth(2);

			this.oldBufferStart = this.bufferStart(d);
			this.oldBufferEnd = this.bufferEnd(d);
			if (this.oldPixelsPerSecond == undefined) {
				this.$waveform.scaleX(renderingContext.pixelsPerSecond / AUX);
				this.oldPixelsPerSecond = AUX;
			} else {
				this.oldPixelsPerSecond = renderingContext.pixelsPerSecond;
			}
			setTimeout(function () {
				console.log('buffering');
				// this.$waveform.cache();
				console.log('buffered');
			}, 500);
		}
	}, {
		key: 'inArea',
		value: function inArea(renderingContext, datum, x1, y1, x2, y2) {
			var shapeX1 = renderingContext.timeToPixel(this.x(datum));
			var shapeX2 = renderingContext.timeToPixel(this.x(datum) + this.width(datum));
			var shapeY1 = renderingContext.valueToPixel(this.y(datum));
			var shapeY2 = renderingContext.valueToPixel(this.y(datum) + this.height(datum));

			// http://jsfiddle.net/uthyZ/ - check overlaping area
			var xOverlap = Math.max(0, Math.min(x2, shapeX2) - Math.max(x1, shapeX1));
			var yOverlap = Math.max(0, Math.min(y2, shapeY2) - Math.max(y1, shapeY1));
			var area = xOverlap * yOverlap;

			return area > 0;
		}
	}, {
		key: 'linear_interpolation',
		value: function linear_interpolation(arr, pos) {
			var first = Math.floor(pos);
			var frac = pos - first;
			var second = first + 1 < arr.length ? first + 1 : 0;

			return arr[first] * (1 - frac) + arr[second] * frac;
		}
	}]);

	return Waveform;
})(BaseShape);
//# sourceMappingURL=data:application/json;base64,