/**
* TimeContextBehavior is used internally in Layers to modify their TimeContext.
* This object is different from other Shapes Behaviors and exists mostly to decrease the size of the Layer.
* All the code here could be considered as part of the layer.
*/
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var TimeContextBehavior = (function () {
	function TimeContextBehavior() {
		_classCallCheck(this, TimeContextBehavior);
	}

	_createClass(TimeContextBehavior, [{
		key: 'edit',
		value: function edit(layer, dx, dy, target) {
			var timeContext = layer.timeContext;

			if (target.hasName('handler')) {
				if (target.hasName('left')) this._editLeft(timeContext, dx);else if (target.hasName('right')) this._editRight(timeContext, dx);else throw new Error('Unexpected konva shape name');
			} else if (target.hasName('segment')) this._move(timeContext, dx);else throw new Error('Unexpected konva shape name');
		}
	}, {
		key: '_editLeft',
		value: function _editLeft(timeContext, dx) {
			// edit `start`, `offset` and `duration`
			var x = timeContext.parent.timeToPixel(timeContext.start);
			var offset = timeContext.timeToPixel(timeContext.offset);
			var width = timeContext.timeToPixel(timeContext.duration);

			var targetX = x + dx;
			var targetOffset = offset - dx;
			var targetWidth = Math.max(width - dx, 1);

			timeContext.start = timeContext.parent.timeToPixel.invert(targetX);
			timeContext.offset = timeContext.timeToPixel.invert(targetOffset);
			timeContext.duration = timeContext.timeToPixel.invert(targetWidth);
		}
	}, {
		key: '_editRight',
		value: function _editRight(timeContext, dx) {
			var width = timeContext.timeToPixel(timeContext.duration);
			var targetWidth = Math.max(width + dx, 1);

			timeContext.duration = timeContext.timeToPixel.invert(targetWidth);
		}
	}, {
		key: '_move',
		value: function _move(timeContext, dx) {
			var x = timeContext.parent.timeToPixel(timeContext.start);
			var targetX = Math.max(x + dx, 0);

			timeContext.start = timeContext.parent.timeToPixel.invert(targetX);
		}
	}, {
		key: 'stretch',
		value: function stretch(layer, dx, dy, target) {
			var timeContext = layer.timeContext;
			var lastDuration = timeContext.duration;
			var lastOffset = timeContext.offset;

			this.edit(layer, dx, dy, target);

			var newDuration = timeContext.duration;
			var ratio = newDuration / lastDuration;

			timeContext.stretchRatio *= ratio;
			timeContext.offset = lastOffset;
			timeContext.duration = lastDuration;
		}
	}]);

	return TimeContextBehavior;
})();

exports['default'] = TimeContextBehavior;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9iZWhhdmlvcnMvdGltZS1jb250ZXh0LWJlaGF2aW9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztJQUtxQixtQkFBbUI7VUFBbkIsbUJBQW1CO3dCQUFuQixtQkFBbUI7OztjQUFuQixtQkFBbUI7O1NBQ25DLGNBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFO0FBQzNCLE9BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7O0FBRXRDLE9BQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUM5QixRQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQzVCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FFakMsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUU1QixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7R0FDaEQ7OztTQUVRLG1CQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUU7O0FBRTFCLE9BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RCxPQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzRCxPQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFNUQsT0FBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2QixPQUFNLFlBQVksR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLE9BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFNUMsY0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkUsY0FBVyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsRSxjQUFXLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0dBQ25FOzs7U0FFUyxvQkFBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQzNCLE9BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVELE9BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFNUMsY0FBVyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztHQUNuRTs7O1NBRUksZUFBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ3RCLE9BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RCxPQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRXBDLGNBQVcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ25FOzs7U0FFTSxpQkFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUU7QUFDOUIsT0FBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxPQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQzFDLE9BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7O0FBRXRDLE9BQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRWpDLE9BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUM7QUFDekMsT0FBTSxLQUFLLEdBQUksV0FBVyxHQUFHLFlBQVksQUFBQyxDQUFDOztBQUUzQyxjQUFXLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQztBQUNsQyxjQUFXLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztBQUNoQyxjQUFXLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztHQUNwQzs7O1FBM0RtQixtQkFBbUI7OztxQkFBbkIsbUJBQW1CIiwiZmlsZSI6InNyYy9iZWhhdmlvcnMvdGltZS1jb250ZXh0LWJlaGF2aW9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIFRpbWVDb250ZXh0QmVoYXZpb3IgaXMgdXNlZCBpbnRlcm5hbGx5IGluIExheWVycyB0byBtb2RpZnkgdGhlaXIgVGltZUNvbnRleHQuXG4qIFRoaXMgb2JqZWN0IGlzIGRpZmZlcmVudCBmcm9tIG90aGVyIFNoYXBlcyBCZWhhdmlvcnMgYW5kIGV4aXN0cyBtb3N0bHkgdG8gZGVjcmVhc2UgdGhlIHNpemUgb2YgdGhlIExheWVyLlxuKiBBbGwgdGhlIGNvZGUgaGVyZSBjb3VsZCBiZSBjb25zaWRlcmVkIGFzIHBhcnQgb2YgdGhlIGxheWVyLlxuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVDb250ZXh0QmVoYXZpb3Ige1xuXHRlZGl0KGxheWVyLCBkeCwgZHksIHRhcmdldCkge1xuXHRcdGNvbnN0IHRpbWVDb250ZXh0ID0gbGF5ZXIudGltZUNvbnRleHQ7XG5cblx0XHRpZiAodGFyZ2V0Lmhhc05hbWUoJ2hhbmRsZXInKSkge1xuXHRcdFx0aWYgKHRhcmdldC5oYXNOYW1lKCdsZWZ0JykpIFxuXHRcdFx0XHR0aGlzLl9lZGl0TGVmdCh0aW1lQ29udGV4dCwgZHgpO1xuXHRcdFx0ZWxzZSBpZiAodGFyZ2V0Lmhhc05hbWUoJ3JpZ2h0JykpIFxuXHRcdFx0XHR0aGlzLl9lZGl0UmlnaHQodGltZUNvbnRleHQsIGR4KTtcblx0XHRcdGVsc2UgXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBrb252YSBzaGFwZSBuYW1lJyk7XG5cdFx0fSBlbHNlIGlmICh0YXJnZXQuaGFzTmFtZSgnc2VnbWVudCcpKSBcblx0XHRcdHRoaXMuX21vdmUodGltZUNvbnRleHQsIGR4KTtcblx0XHRlbHNlIFxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGtvbnZhIHNoYXBlIG5hbWUnKTtcblx0fVxuXG5cdF9lZGl0TGVmdCh0aW1lQ29udGV4dCwgZHgpIHtcblx0XHQvLyBlZGl0IGBzdGFydGAsIGBvZmZzZXRgIGFuZCBgZHVyYXRpb25gXG5cdFx0Y29uc3QgeCA9IHRpbWVDb250ZXh0LnBhcmVudC50aW1lVG9QaXhlbCh0aW1lQ29udGV4dC5zdGFydCk7XG5cdFx0Y29uc3Qgb2Zmc2V0ID0gdGltZUNvbnRleHQudGltZVRvUGl4ZWwodGltZUNvbnRleHQub2Zmc2V0KTtcblx0XHRjb25zdCB3aWR0aCA9IHRpbWVDb250ZXh0LnRpbWVUb1BpeGVsKHRpbWVDb250ZXh0LmR1cmF0aW9uKTtcblxuXHRcdGNvbnN0IHRhcmdldFggPSB4ICsgZHg7XG5cdFx0Y29uc3QgdGFyZ2V0T2Zmc2V0ID0gb2Zmc2V0IC0gZHg7XG5cdFx0Y29uc3QgdGFyZ2V0V2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIGR4LCAxKTtcblxuXHRcdHRpbWVDb250ZXh0LnN0YXJ0ID0gdGltZUNvbnRleHQucGFyZW50LnRpbWVUb1BpeGVsLmludmVydCh0YXJnZXRYKTtcblx0XHR0aW1lQ29udGV4dC5vZmZzZXQgPSB0aW1lQ29udGV4dC50aW1lVG9QaXhlbC5pbnZlcnQodGFyZ2V0T2Zmc2V0KTtcblx0XHR0aW1lQ29udGV4dC5kdXJhdGlvbiA9IHRpbWVDb250ZXh0LnRpbWVUb1BpeGVsLmludmVydCh0YXJnZXRXaWR0aCk7XG5cdH1cblxuXHRfZWRpdFJpZ2h0KHRpbWVDb250ZXh0LCBkeCkge1xuXHRcdGNvbnN0IHdpZHRoID0gdGltZUNvbnRleHQudGltZVRvUGl4ZWwodGltZUNvbnRleHQuZHVyYXRpb24pO1xuXHRcdGNvbnN0IHRhcmdldFdpZHRoID0gTWF0aC5tYXgod2lkdGggKyBkeCwgMSk7XG5cblx0XHR0aW1lQ29udGV4dC5kdXJhdGlvbiA9IHRpbWVDb250ZXh0LnRpbWVUb1BpeGVsLmludmVydCh0YXJnZXRXaWR0aCk7XG5cdH1cblxuXHRfbW92ZSh0aW1lQ29udGV4dCwgZHgpIHtcblx0XHRjb25zdCB4ID0gdGltZUNvbnRleHQucGFyZW50LnRpbWVUb1BpeGVsKHRpbWVDb250ZXh0LnN0YXJ0KTtcblx0XHRjb25zdCB0YXJnZXRYID0gTWF0aC5tYXgoeCArIGR4LCAwKTtcblxuXHRcdHRpbWVDb250ZXh0LnN0YXJ0ID0gdGltZUNvbnRleHQucGFyZW50LnRpbWVUb1BpeGVsLmludmVydCh0YXJnZXRYKTtcblx0fVxuXG5cdHN0cmV0Y2gobGF5ZXIsIGR4LCBkeSwgdGFyZ2V0KSB7XG5cdFx0Y29uc3QgdGltZUNvbnRleHQgPSBsYXllci50aW1lQ29udGV4dDtcblx0XHRjb25zdCBsYXN0RHVyYXRpb24gPSB0aW1lQ29udGV4dC5kdXJhdGlvbjtcblx0XHRjb25zdCBsYXN0T2Zmc2V0ID0gdGltZUNvbnRleHQub2Zmc2V0O1xuXG5cdFx0dGhpcy5lZGl0KGxheWVyLCBkeCwgZHksIHRhcmdldCk7XG5cblx0XHRjb25zdCBuZXdEdXJhdGlvbiA9IHRpbWVDb250ZXh0LmR1cmF0aW9uO1xuXHRcdGNvbnN0IHJhdGlvID0gKG5ld0R1cmF0aW9uIC8gbGFzdER1cmF0aW9uKTtcblxuXHRcdHRpbWVDb250ZXh0LnN0cmV0Y2hSYXRpbyAqPSByYXRpbztcblx0XHR0aW1lQ29udGV4dC5vZmZzZXQgPSBsYXN0T2Zmc2V0O1xuXHRcdHRpbWVDb250ZXh0LmR1cmF0aW9uID0gbGFzdER1cmF0aW9uO1xuXHR9XG59XG4iXX0=