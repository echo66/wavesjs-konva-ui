'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _packageJson = require('../../package.json');

var _packageJson2 = _interopRequireDefault(_packageJson);

var newLine = '\n';
var usageText = '\n  Usage: docchi < <input> > <output>\n  Usage: docchi <input> [options]\n\n  Options:\n\n    -o, --out-file <file>     Output to a file. Input must be a file.\n    -h, --help                Show this message.\n    -v, --version             Print the version number.\n\n  Input JavaScript source file, output JSDoc comments attached to their code\n  contexts in JSON format. Use programmatically in Node.js if the defaults are\n  not sufficient.\n';

exports['default'] = function () {
  var args = arguments.length <= 0 || arguments[0] === undefined ? process.argv.slice(2) : arguments[0];
  return new _Promise(function (resolve) {
    args = (0, _minimist2['default'])(args);

    var version = args.v || args.version;

    if (version) return resolve('v' + _packageJson2['default'].version);

    var help = args.h || args.help;

    if (help) return resolve(usageText);

    var input = args._[0];

    if (!input) {
      var _ret = (function () {
        var chunks = [];

        process.stdin.on('readable', function () {
          var chunk = process.stdin.read();
          if (chunk !== null) chunks.push(chunk);
        });

        process.stdin.on('end', function () {
          return resolve(JSON.stringify(_2['default'].parse(Buffer.concat(chunks)).output(), null, 2));
        });

        return {
          v: null
        };
      })();

      if (typeof _ret === 'object') return _ret.v;
    }

    var outputFile = args.o || args['out-file'];

    // Assume that input is a file.
    var inputBuffer = _fs2['default'].readFileSync(input);
    var output = JSON.stringify(_2['default'].parse(inputBuffer).output(), null, 2);

    if (outputFile) {
      (0, _mkdirp2['default'])(_path2['default'].dirname(outputFile));
      _fs2['default'].writeFileSync(outputFile, output + newLine);
      return resolve();
    }

    return resolve(output);
  });
};

module.exports = exports['default'];