'use strict'


class Waveform extends BaseShape {

	destroy() {
		this.$label.destroy();
		this.$label = null;

		this.$header.destroy();
		this.$header = null;

		this.$body.destroy();
		this.$body = null;

		this.$leftHandler.destroy();
		this.$leftHandler = null;

		this.$rightHandler.destroy();
		this.$rightHandler = null;

		this.$waveform.destroy();
		this.$waveform = null;

		super.destroy();
	}

	getClassName() { return 'waveform'; }

	_getAccessorList() {
		// return { y: 0 };
		// TODO: delete all but sampleRate.
		return { data: [], x: 0, width: 10000, bufferStart: 0, bufferEnd: 0, sampleRate: 44100, color: 'black', text: "" };
	}

	_getDefaults() {
		return {
			waveformQuality: 5000, 
			squaringFactor: 1, 
			displayHandlers: true, 
			headerHeightRatio: 0.1, // 10% of the body height
			waveform: {
				color: '#000000',
				opacity: 1, 
			},
			header: {
				color: 'green',
				opacity: 0.4, 
			},
			body: {
				color: 'yellow',
				opacity: 0.1, 
			},
			handler: {
				width: 2, 
				opacity: 1,
				color: 'orange'
			},
		};
	}

	render(renderingContext) {
		if (this.$el) { return this.$el; }

		this.$el = [];

		this.$header = new Konva.Rect({});
		this.$header.addName('header');
		this.$header.shape = this;
		// this.$header.on('mouseover', function() { document.body.style.cursor = 'pointer'; });
		// this.$header.on('mouseout', function() { document.body.style.cursor = 'default'; });		

		this.$body	 = new Konva.Rect({});
		this.$body.addName('body');
		this.$body.shape = this;
		// this.$body.on('mouseover', function() { document.body.style.cursor = 'pointer'; });
		// this.$body.on('mouseout', function() { document.body.style.cursor = 'default'; });

		this.$leftHandler = new Konva.Rect({});
		this.$leftHandler.addName('handler');
		this.$leftHandler.addName('left');
		this.$leftHandler.shape = this;
		// this.$leftHandler.on('mouseover', function() { document.body.style.cursor = 'ew-resize'; });
		// this.$leftHandler.on('mouseout', function() { document.body.style.cursor = 'default'; });

		this.$rightHandler = new Konva.Rect({});
		this.$rightHandler.addName('handler');
		this.$rightHandler.addName('right');
		this.$rightHandler.shape = this;
		// this.$rightHandler.on('mouseover', function() { document.body.style.cursor = 'ew-resize'; });
		// this.$rightHandler.on('mouseout', function() { document.body.style.cursor = 'default'; });

		this.$label = new Konva.Text({ listening: false });
		this.$label.shape = this;

		this.$waveform = new Konva.Path({ listening: false });
		this.$waveform.shape = this;

		this.$el.push(this.$body);
		this.$el.push(this.$waveform);
		this.$el.push(this.$header);
		this.$el.push(this.$label);
		this.$el.push(this.$leftHandler);
		this.$el.push(this.$rightHandler);

		return this.$el;
	}

	update(renderingContext, datum) {
		const d = datum || this.datum;

		this.$label.visible(this.visible);
		this.$body.visible(this.visible);
		this.$leftHandler.visible(this.visible && this.params.displayHandlers);
		this.$rightHandler.visible(this.visible && this.params.displayHandlers);
		this.$waveform.visible(this.visible);

		if (!this.visible)	return;


		var  x = renderingContext.timeToPixel(this.x(d));
		var width = renderingContext.timeToPixel(this.width(d));
		var height = renderingContext.height;
		var color = this.params.waveform.color;

		this.$el.forEach((el) => el.x(x).y(0));

		this.$label.text(this.text(d)).x(x+10).y(5);

		this.$header.width(Math.max(width, 0))
								.height(height * this.params.headerHeightRatio)
								.fill(this.params.header.color)
								.opacity(this.params.header.opacity);
		this.$body.width(Math.max(width, 0))
								.height(height)
								.fill(this.params.body.color)
								.opacity(this.params.body.opacity);

		this.$leftHandler.width(this.params.handler.width).height(height).fill(this.params.handler.color);

		this.$rightHandler.x(x + width - this.params.handler.width).width(this.params.handler.width).height(height).fill(this.params.handler.color);

		this.$waveform.fill(this.params.waveform.color).opacity(this.params.waveform.opacity).y(0);

		this.$waveform.perfectDrawEnabled(true);


		// WAVEFORM PART
		const samePixelsPerSecond 	= this.oldPixelsPerSecond == renderingContext.pixelsPerSecond;
		const sameBufferInterval  	= this.oldBufferStart == this.bufferStart(d) && this.oldBufferEnd == this.bufferEnd(d);
		const sameWidth 			= this.oldWidth == this.width(d);

		this.oldPixelsPerSecond = renderingContext.pixelsPerSecond;
		this.oldBufferStart = this.bufferStart(d);
		this.oldBufferEnd = this.bufferEnd(d);
		this.oldWidth = this.width(d);

		if (samePixelsPerSecond && sameBufferInterval && sameWidth)
			return;


		// this.$waveform.clearCache();

		// define nbr of samples per pixels
		const numberOfSamples = this.bufferEnd(d) - this.bufferStart(d);
		const numberOfPixels = Math.ceil(renderingContext.timeToPixel(this.width(d)));
		const samplesPerPixel = numberOfSamples / numberOfPixels;

		if (!samplesPerPixel || this.data(d).length < samplesPerPixel) { return; }

		// get min/max per pixels, clamped to the visible area
		const invert = renderingContext.timeToPixel.invert;
		const valueToPixel = renderingContext.valueToPixel;
		const sampleRate = this.sampleRate(d);
		if (this.instructions == undefined)
			this.instructions = new Array(50);
		this.instructions.length = numberOfPixels;
		const MID = valueToPixel((renderingContext.valueToPixel.domain()[1] - valueToPixel.domain()[0]) / 2)
		var counter = 0;
		const START = Math.round(Math.max(x, -renderingContext.offsetX) - x);

		for (var px = START; px < numberOfPixels; px++) {
			const startSample = this.bufferStart(d) + samplesPerPixel * px;
			const extract = this.data(d).subarray(startSample, startSample + samplesPerPixel);

			let min = Infinity;
			let max = -Infinity;

			for (let j = 0, l = extract.length; j < l; j++) {
				let sample = extract[j];
				if (sample < min) { min = sample; }
				if (sample > max) { max = sample; }
			}
			// disallow Infinity
			min = !isFinite(min) ? 0 : min;
			max = !isFinite(max) ? 0 : max;
			if (min === 0 && max === 0) { continue; }

			let y1 = Math.round(renderingContext.valueToPixel(min));
			let y2 = Math.round(renderingContext.valueToPixel(max));

			this.instructions[counter++] = (`${px},${y1-MID}L${px},${y2-MID}`);
		}
		this.instructions.length = counter;

		this.$waveform.data('M' + `${0},${MID}L` + this.instructions.join('L') + `L${px},${MID}` + 'z');

		// this.$waveform.cache();
	}

	inArea(renderingContext, datum, x1, y1, x2, y2) {
		const shapeX1 = renderingContext.timeToPixel(this.x(datum));
		const shapeX2 = renderingContext.timeToPixel(this.x(datum) + this.width(datum));
		const shapeY1 = renderingContext.valueToPixel(this.y(datum));
		const shapeY2 = renderingContext.valueToPixel(this.y(datum) + this.height(datum));

		// http://jsfiddle.net/uthyZ/ - check overlaping area
		const xOverlap = Math.max(0, Math.min(x2, shapeX2) - Math.max(x1, shapeX1));
		const yOverlap = Math.max(0, Math.min(y2, shapeY2) - Math.max(y1, shapeY1));
		const area = xOverlap * yOverlap;

		return area > 0;
	}

	linear_interpolation(arr, pos) {
		const first	 = Math.floor(pos);
		const frac		= pos - first;
		const second	= (first + 1) < arr.length ? (first + 1) : 0;

		return arr[first] * (1 - frac) + arr[second] * frac;
	}
}